
Software_UART_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000310  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b87  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000970  00000000  00000000  00000f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000468  00000000  00000000  000018df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  00001d48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ce  00000000  00000000  00001e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014f  00000000  00000000  00002322  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002471  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 18 01 	jmp	0x230	; 0x230 <__vector_5>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_11>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a3 30       	cpi	r26, 0x03	; 3
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  d4:	0c 94 4c 01 	jmp	0x298	; 0x298 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <pin_init>:

 
 void pin_init()
 {
  
  PCICR  |= (1 << PCIE2);
  dc:	e8 e6       	ldi	r30, 0x68	; 104
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	84 60       	ori	r24, 0x04	; 4
  e4:	80 83       	st	Z, r24
  PCMSK2 |= (1 << PCINT16); //| (1 << PCINT17);
  e6:	ed e6       	ldi	r30, 0x6D	; 109
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	81 60       	ori	r24, 0x01	; 1
  ee:	80 83       	st	Z, r24
  f0:	08 95       	ret

000000f2 <main>:
uint8_t timer_count = 0;


int main()
{
	PORTD = Tx_pin;
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	8b b9       	out	0x0b, r24	; 11
	DDRD  = 0b00000010;
  f6:	8a b9       	out	0x0a, r24	; 10
	sei();
  f8:	78 94       	sei
	
	pin_init();
  fa:	0e 94 6e 00 	call	0xdc	; 0xdc <pin_init>
  fe:	ff cf       	rjmp	.-2      	; 0xfe <main+0xc>

00000100 <__vector_11>:
	Tx_send();
	stop_timer0();
}

ISR (TIMER1_COMPA_vect)
{
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	8f 93       	push	r24
	timer_count = timer_count + 1;
 10c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 110:	8f 5f       	subi	r24, 0xFF	; 255
 112:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	
}
 116:	8f 91       	pop	r24
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <start_timer0>:

void start_timer0()
{
	TCNT1  = 0x00;
 122:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 126:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	OCR1A  = 8355;
 12a:	83 ea       	ldi	r24, 0xA3	; 163
 12c:	90 e2       	ldi	r25, 0x20	; 32
 12e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 132:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1A = 0x00;
 136:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<COM1A1) | (1<<WGM12) | (1<<CS10);
 13a:	89 e8       	ldi	r24, 0x89	; 137
 13c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 = (1<<OCIE1A);
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	sei();
 146:	78 94       	sei
 148:	08 95       	ret

0000014a <stop_timer0>:
	
}

void stop_timer0()
{
	OCR1A = 0;
 14a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 14e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1A = 0x00;
 152:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0x00;
 156:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 15a:	08 95       	ret

0000015c <wait_1bit>:
}

void wait_1bit()
{
	while (timer_count < 1)
 15c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 160:	88 23       	and	r24, r24
 162:	e1 f3       	breq	.-8      	; 0x15c <wait_1bit>
	{	 
	}
	timer_count = 0;
 164:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 168:	08 95       	ret

0000016a <Rx_receive>:
}


void Rx_receive()
{
	bit_count = 0;
 16a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <bit_count>
	for (int i = 0; i < 8; i++)
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	1d c0       	rjmp	.+58     	; 0x1ae <Rx_receive+0x44>
	{
		if (PINC & Rx_pin)
 174:	30 9b       	sbis	0x06, 0	; 6
 176:	03 c0       	rjmp	.+6      	; 0x17e <Rx_receive+0x14>
		{
			bit_count = 1;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <bit_count>
		}
		if (bit_count == 1)
 17e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <bit_count>
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	29 f4       	brne	.+10     	; 0x190 <Rx_receive+0x26>
		{
			Tx_byte |= 0b0000001;	
 186:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Tx_byte>
 18a:	81 60       	ori	r24, 0x01	; 1
 18c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Tx_byte>
		}
		Tx_byte = Tx_byte << 1;
 190:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Tx_byte>
 194:	88 0f       	add	r24, r24
 196:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Tx_byte>
		
		while (timer_count < 1)
 19a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 19e:	88 23       	and	r24, r24
 1a0:	e1 f3       	breq	.-8      	; 0x19a <Rx_receive+0x30>
		{
		}
		timer_count = 0;
 1a2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		bit_count = 0;
 1a6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <bit_count>


void Rx_receive()
{
	bit_count = 0;
	for (int i = 0; i < 8; i++)
 1aa:	2f 5f       	subi	r18, 0xFF	; 255
 1ac:	3f 4f       	sbci	r19, 0xFF	; 255
 1ae:	28 30       	cpi	r18, 0x08	; 8
 1b0:	31 05       	cpc	r19, r1
 1b2:	04 f3       	brlt	.-64     	; 0x174 <Rx_receive+0xa>
		{
		}
		timer_count = 0;
		bit_count = 0;
	}
}
 1b4:	08 95       	ret

000001b6 <start_bit>:



void start_bit()
{
	PORTC &= ~(1UL <<Tx_pin);
 1b6:	88 b1       	in	r24, 0x08	; 8
 1b8:	8b 7f       	andi	r24, 0xFB	; 251
 1ba:	88 b9       	out	0x08, r24	; 8
	while (timer_count < 1)
 1bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c0:	88 23       	and	r24, r24
 1c2:	e1 f3       	breq	.-8      	; 0x1bc <start_bit+0x6>
	{
	}
	timer_count = 0;
 1c4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c8:	08 95       	ret

000001ca <Tx_send>:
}

void Tx_send()
{
	bit_count = 0;
 1ca:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <bit_count>
	for (int i = 0; i < 8; i++)
 1ce:	20 e0       	ldi	r18, 0x00	; 0
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	21 c0       	rjmp	.+66     	; 0x216 <Tx_send+0x4c>
	{
		if (Tx_byte & 0x80)
 1d4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Tx_byte>
 1d8:	88 23       	and	r24, r24
 1da:	1c f4       	brge	.+6      	; 0x1e2 <Tx_send+0x18>
		{
			bit_count = 1;
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <bit_count>
		}
		if (bit_count == 1)
 1e2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <bit_count>
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	21 f4       	brne	.+8      	; 0x1f2 <Tx_send+0x28>
		{
			PORTC |= 1UL << Tx_pin;
 1ea:	88 b1       	in	r24, 0x08	; 8
 1ec:	84 60       	ori	r24, 0x04	; 4
 1ee:	88 b9       	out	0x08, r24	; 8
 1f0:	03 c0       	rjmp	.+6      	; 0x1f8 <Tx_send+0x2e>
		}
		else
		{
			PORTC &= ~(1UL <<Tx_pin);
 1f2:	88 b1       	in	r24, 0x08	; 8
 1f4:	8b 7f       	andi	r24, 0xFB	; 251
 1f6:	88 b9       	out	0x08, r24	; 8
		}
		bit_count = 0;
 1f8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <bit_count>
		Tx_byte = Tx_byte << 1;
 1fc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Tx_byte>
 200:	88 0f       	add	r24, r24
 202:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Tx_byte>
		while (timer_count < 1)
 206:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 20a:	88 23       	and	r24, r24
 20c:	e1 f3       	breq	.-8      	; 0x206 <Tx_send+0x3c>
		{
		}
		timer_count = 0;
 20e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
}

void Tx_send()
{
	bit_count = 0;
	for (int i = 0; i < 8; i++)
 212:	2f 5f       	subi	r18, 0xFF	; 255
 214:	3f 4f       	sbci	r19, 0xFF	; 255
 216:	28 30       	cpi	r18, 0x08	; 8
 218:	31 05       	cpc	r19, r1
 21a:	e4 f2       	brlt	.-72     	; 0x1d4 <Tx_send+0xa>
		while (timer_count < 1)
		{
		}
		timer_count = 0;
	}	
	PORTC |= 1UL << Tx_pin;
 21c:	88 b1       	in	r24, 0x08	; 8
 21e:	84 60       	ori	r24, 0x04	; 4
 220:	88 b9       	out	0x08, r24	; 8
	while (timer_count < 1)
 222:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 226:	88 23       	and	r24, r24
 228:	e1 f3       	breq	.-8      	; 0x222 <Tx_send+0x58>
	{
	}
	timer_count = 0;
 22a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 22e:	08 95       	ret

00000230 <__vector_5>:
  PCICR  |= (1 << PCIE2);
  PCMSK2 |= (1 << PCINT16); //| (1 << PCINT17);
 }

ISR (PCINT2_vect)
{
 230:	1f 92       	push	r1
 232:	0f 92       	push	r0
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	0f 92       	push	r0
 238:	11 24       	eor	r1, r1
 23a:	2f 93       	push	r18
 23c:	3f 93       	push	r19
 23e:	4f 93       	push	r20
 240:	5f 93       	push	r21
 242:	6f 93       	push	r22
 244:	7f 93       	push	r23
 246:	8f 93       	push	r24
 248:	9f 93       	push	r25
 24a:	af 93       	push	r26
 24c:	bf 93       	push	r27
 24e:	ef 93       	push	r30
 250:	ff 93       	push	r31
	
	PCICR = 0x00;
 252:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	PCMSK2 = 0x00;
 256:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__TEXT_REGION_LENGTH__+0x7f806d>
	
	
	
	start_timer0();
 25a:	0e 94 91 00 	call	0x122	; 0x122 <start_timer0>
	wait_1bit();
 25e:	0e 94 ae 00 	call	0x15c	; 0x15c <wait_1bit>
	Rx_receive();
 262:	0e 94 b5 00 	call	0x16a	; 0x16a <Rx_receive>
	wait_1bit();		//stop bit
 266:	0e 94 ae 00 	call	0x15c	; 0x15c <wait_1bit>
	
	
	start_bit();	
 26a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <start_bit>
	Tx_send();
 26e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Tx_send>
	stop_timer0();
 272:	0e 94 a5 00 	call	0x14a	; 0x14a <stop_timer0>
}
 276:	ff 91       	pop	r31
 278:	ef 91       	pop	r30
 27a:	bf 91       	pop	r27
 27c:	af 91       	pop	r26
 27e:	9f 91       	pop	r25
 280:	8f 91       	pop	r24
 282:	7f 91       	pop	r23
 284:	6f 91       	pop	r22
 286:	5f 91       	pop	r21
 288:	4f 91       	pop	r20
 28a:	3f 91       	pop	r19
 28c:	2f 91       	pop	r18
 28e:	0f 90       	pop	r0
 290:	0f be       	out	0x3f, r0	; 63
 292:	0f 90       	pop	r0
 294:	1f 90       	pop	r1
 296:	18 95       	reti

00000298 <_exit>:
 298:	f8 94       	cli

0000029a <__stop_program>:
 29a:	ff cf       	rjmp	.-2      	; 0x29a <__stop_program>
