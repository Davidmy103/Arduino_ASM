
Software_RGBRing_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000001b6  0000022a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b31  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009ad  00000000  00000000  00000e29  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000050a  00000000  00000000  000017d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001ce0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004dc  00000000  00000000  00001d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00002200  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e6 eb       	ldi	r30, 0xB6	; 182
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	aa 30       	cpi	r26, 0x0A	; 10
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	aa e0       	ldi	r26, 0x0A	; 10
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	aa 30       	cpi	r26, 0x0A	; 10
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 ca 00 	call	0x194	; 0x194 <main>
  ea:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <rgb_funkcija>:
	
 .extern broj

rgb_funkcija:					
								
	ldi ZL, lo8(rgb_niz)				
  f2:	e0 e0       	ldi	r30, 0x00	; 0
	ldi ZH, hi8(rgb_niz)	
  f4:	f1 e0       	ldi	r31, 0x01	; 1

	ldi r23, 24			;upisuje se broj dioda (24) u r23
  f6:	78 e1       	ldi	r23, 0x18	; 24
	mov r24, r22		;upisuje se drugi arg iz func "rgb_funkcija" u r24
  f8:	86 2f       	mov	r24, r22
	sub r23, r22		;oduzima se broj 24 od zadatog broja sto oznacava koliko dioda su ugasene
  fa:	76 1b       	sub	r23, r22
	ldi r22, 3			;upisuje se 3 jer 3*broj_zeljenih_upaljenih_dioda
  fc:	63 e0       	ldi	r22, 0x03	; 3
	mul r24, r22		;mnozi se broj_upaljen_dioda sa 3 					
  fe:	86 9f       	mul	r24, r22
	mov r24, r0			;upisuje se rezultat u r24
 100:	80 2d       	mov	r24, r0
	ldi r22, 8			;upisuje se 8 u r22 
 102:	68 e0       	ldi	r22, 0x08	; 8
	mul r24, r22		;mnozi se gore dobijen broj sa 8	
 104:	86 9f       	mul	r24, r22
	mov r24, r0			;upisuje se rezultat u r24
 106:	80 2d       	mov	r24, r0

	
	
					
	ld r20, Z+					
 108:	41 91       	ld	r20, Z+
								
								
	sbi 0x0A,4					
 10a:	54 9a       	sbi	0x0a, 4	; 10

0000010c <provera>:
								
		

provera:						
	ldi r28, 8
 10c:	c8 e0       	ldi	r28, 0x08	; 8

0000010e <provera_1>:
provera_1:
	rol r20
 10e:	44 1f       	adc	r20, r20
	brcs logic_1
 110:	78 f0       	brcs	.+30     	; 0x130 <logic_1>

00000112 <logic_0>:
logic_0:
	sbi 0x0B, 4
 112:	5c 9a       	sbi	0x0b, 4	; 11
	dec r24
 114:	8a 95       	dec	r24
	breq kraj
 116:	01 f1       	breq	.+64     	; 0x158 <kraj>
	nop
 118:	00 00       	nop
	cbi 0x0B, 4
 11a:	5c 98       	cbi	0x0b, 4	; 11
	dec r28
 11c:	ca 95       	dec	r28
	breq bb
 11e:	b1 f0       	breq	.+44     	; 0x14c <bb>
	...
	nop
	nop
	nop
	nop
	rol r20
 128:	44 1f       	adc	r20, r20
	brcs logic_1_1
 12a:	08 f0       	brcs	.+2      	; 0x12e <logic_1_1>
	rjmp logic_0
 12c:	f2 cf       	rjmp	.-28     	; 0x112 <logic_0>

0000012e <logic_1_1>:
	...

00000130 <logic_1>:
								
								
logic_1_1:
	nop
logic_1:
	sbi 0x0B, 4
 130:	5c 9a       	sbi	0x0b, 4	; 11
	dec r24
 132:	8a 95       	dec	r24
	breq kraj
 134:	89 f0       	breq	.+34     	; 0x158 <kraj>
	dec r28
 136:	ca 95       	dec	r28
	breq aa
 138:	59 f0       	breq	.+22     	; 0x150 <aa>
	nop
 13a:	00 00       	nop
	nop
 13c:	00 00       	nop
	nop
 13e:	00 00       	nop
	cbi 0x0B, 4								
 140:	5c 98       	cbi	0x0b, 4	; 11
	nop
 142:	00 00       	nop
	nop							
 144:	00 00       	nop
	rol r20
 146:	44 1f       	adc	r20, r20
	brcs logic_1_1
 148:	90 f3       	brcs	.-28     	; 0x12e <logic_1_1>
	rjmp logic_0							
 14a:	e3 cf       	rjmp	.-58     	; 0x112 <logic_0>

0000014c <bb>:
								
bb:
	ld r20, Z+
 14c:	41 91       	ld	r20, Z+
	rjmp provera
 14e:	de cf       	rjmp	.-68     	; 0x10c <provera>

00000150 <aa>:

									
			
aa:
	 nop
 150:	00 00       	nop
  	 ld r20, Z+
 152:	41 91       	ld	r20, Z+
	 cbi 0x0B, 4
 154:	5c 98       	cbi	0x0b, 4	; 11
	 rjmp provera
 156:	da cf       	rjmp	.-76     	; 0x10c <provera>

00000158 <kraj>:
	

	
kraj:
	cbi 0x0B, 4
 158:	5c 98       	cbi	0x0b, 4	; 11
	
	ldi r22, 3
 15a:	63 e0       	ldi	r22, 0x03	; 3
	mul r23, r22
 15c:	76 9f       	mul	r23, r22
	ldi r22, 8 
 15e:	68 e0       	ldi	r22, 0x08	; 8
	mov r23, r0
 160:	70 2d       	mov	r23, r0
	mul r23, r22
 162:	76 9f       	mul	r23, r22
	mov r24, r1			;high byte
 164:	81 2d       	mov	r24, r1
	mov r23, r0			;low byte
 166:	70 2d       	mov	r23, r0
	sub r23, 1
 168:	71 19       	sub	r23, r1
	rjmp write
 16a:	03 c0       	rjmp	.+6      	; 0x172 <write>

0000016c <write_1>:

write_1:
	nop
 16c:	00 00       	nop
	nop
 16e:	00 00       	nop
	...

00000172 <write>:
	nop
write:
	sbi 0x0B, 4
 172:	5c 9a       	sbi	0x0b, 4	; 11
	nop
 174:	00 00       	nop
	ldi r26, 0
 176:	a0 e0       	ldi	r26, 0x00	; 0
	nop
 178:	00 00       	nop
	cbi 0x0B, 4
 17a:	5c 98       	cbi	0x0b, 4	; 11
	...
	nop
	nop
	nop
	nop
	dec r23
 184:	7a 95       	dec	r23
	cpse r23, r26
 186:	7a 13       	cpse	r23, r26
	rjmp write_1
 188:	f1 cf       	rjmp	.-30     	; 0x16c <write_1>
	dec r24
 18a:	8a 95       	dec	r24
	breq end
 18c:	09 f0       	breq	.+2      	; 0x190 <end>
	rjmp write
 18e:	f1 cf       	rjmp	.-30     	; 0x172 <write>

00000190 <end>:



	end:
		ret
 190:	08 95       	ret

00000192 <isr>:
	 
isr:
	


	ret
 192:	08 95       	ret

00000194 <main>:
	
	while(1)
	{
	
		
	rgb_funkcija(rgb_niz,3);
 194:	63 e0       	ldi	r22, 0x03	; 3
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	0e 94 79 00 	call	0xf2	; 0xf2 <rgb_funkcija>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19e:	2f e3       	ldi	r18, 0x3F	; 63
 1a0:	8d e0       	ldi	r24, 0x0D	; 13
 1a2:	93 e0       	ldi	r25, 0x03	; 3
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	80 40       	sbci	r24, 0x00	; 0
 1a8:	90 40       	sbci	r25, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <main+0x10>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <main+0x1a>
 1ae:	00 00       	nop
 1b0:	f1 cf       	rjmp	.-30     	; 0x194 <main>

000001b2 <_exit>:
 1b2:	f8 94       	cli

000001b4 <__stop_program>:
 1b4:	ff cf       	rjmp	.-2      	; 0x1b4 <__stop_program>
